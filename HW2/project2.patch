--- noop-iosched.c	2018-05-06 20:05:26.968866048 -0700
+++ sstf.iosched.c	2018-05-06 20:24:13.520382031 -0700
@@ -1,124 +1,155 @@
-/*
- * elevator noop
- */
-#include <linux/blkdev.h>
-#include <linux/elevator.h>
-#include <linux/bio.h>
-#include <linux/module.h>
-#include <linux/slab.h>
-#include <linux/init.h>
-
-struct noop_data {
-	struct list_head queue;
-};
-
-static void noop_merged_requests(struct request_queue *q, struct request *rq,
-				 struct request *next)
-{
-	list_del_init(&next->queuelist);
-}
-
-static int noop_dispatch(struct request_queue *q, int force)
-{
-	struct noop_data *nd = q->elevator->elevator_data;
-
-	if (!list_empty(&nd->queue)) {
-		struct request *rq;
-		rq = list_entry(nd->queue.next, struct request, queuelist);
-		list_del_init(&rq->queuelist);
-		elv_dispatch_sort(q, rq);
-		return 1;
-	}
-	return 0;
-}
-
-static void noop_add_request(struct request_queue *q, struct request *rq)
-{
-	struct noop_data *nd = q->elevator->elevator_data;
-
-	list_add_tail(&rq->queuelist, &nd->queue);
-}
-
-static struct request *
-noop_former_request(struct request_queue *q, struct request *rq)
-{
-	struct noop_data *nd = q->elevator->elevator_data;
-
-	if (rq->queuelist.prev == &nd->queue)
-		return NULL;
-	return list_entry(rq->queuelist.prev, struct request, queuelist);
-}
-
-static struct request *
-noop_latter_request(struct request_queue *q, struct request *rq)
-{
-	struct noop_data *nd = q->elevator->elevator_data;
-
-	if (rq->queuelist.next == &nd->queue)
-		return NULL;
-	return list_entry(rq->queuelist.next, struct request, queuelist);
-}
-
-static int noop_init_queue(struct request_queue *q, struct elevator_type *e)
-{
-	struct noop_data *nd;
-	struct elevator_queue *eq;
-
-	eq = elevator_alloc(q, e);
-	if (!eq)
-		return -ENOMEM;
-
-	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
-	if (!nd) {
-		kobject_put(&eq->kobj);
-		return -ENOMEM;
-	}
-	eq->elevator_data = nd;
-
-	INIT_LIST_HEAD(&nd->queue);
-
-	spin_lock_irq(q->queue_lock);
-	q->elevator = eq;
-	spin_unlock_irq(q->queue_lock);
-	return 0;
-}
-
-static void noop_exit_queue(struct elevator_queue *e)
-{
-	struct noop_data *nd = e->elevator_data;
-
-	BUG_ON(!list_empty(&nd->queue));
-	kfree(nd);
-}
-
-static struct elevator_type elevator_noop = {
-	.ops = {
-		.elevator_merge_req_fn		= noop_merged_requests,
-		.elevator_dispatch_fn		= noop_dispatch,
-		.elevator_add_req_fn		= noop_add_request,
-		.elevator_former_req_fn		= noop_former_request,
-		.elevator_latter_req_fn		= noop_latter_request,
-		.elevator_init_fn		= noop_init_queue,
-		.elevator_exit_fn		= noop_exit_queue,
-	},
-	.elevator_name = "noop",
-	.elevator_owner = THIS_MODULE,
-};
-
-static int __init noop_init(void)
-{
-	return elv_register(&elevator_noop);
-}
-
-static void __exit noop_exit(void)
-{
-	elv_unregister(&elevator_noop);
-}
-
-module_init(noop_init);
-module_exit(noop_exit);
-
-
-MODULE_AUTHOR("Jens Axboe");
-MODULE_LICENSE("GPL");
-MODULE_DESCRIPTION("No-op IO scheduler");
+/*
+* elevator sstf
+*/
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+
+struct sstf_data {
+  struct list_head queue;
+};
+
+static void sstf_merged_requests(struct request_queue *q, struct request *rq,
+  struct request *next)
+  {
+    list_del_init(&next->queuelist);
+  }
+
+  static int sstf_dispatch(struct request_queue *q, int force)
+  {
+    struct sstf_data *sd = q->elevator->elevator_data;
+
+    if (!list_empty(&sd->queue)) {
+      struct request *rq;
+      rq = list_entry(nd->queue.next, struct request, queuelist);
+      list_del_init(&rq->queuelist);
+      elv_dispatch_sort(q, rq);
+      return 1;
+    }
+    return 0;
+  }
+
+  static void sstf_add_request(struct request_queue *q, struct request *rq)
+  {
+    struct sstf_data *sd = q->elevator->elevator_data;
+    struct request *data;
+    if(list_empty(&sd -> queue))
+    {
+      list_add_tail(&rq -> queuelist, &nd -> queue);
+    }
+    else if((list_entry(sd -> queue.next) -> sector > rq -> sector) && rq -> sector > list_entry(sd -> queue.prev) -> sector)
+    {
+      if(rq -> sector > q -> end_sector)
+      {
+        list_add(&rq -> queuelist, &nd -> queue);
+      }
+      else
+      {
+        list_add_tail(&rq -> queuelist, &nd -> queue);
+      }
+    }
+    else
+    {
+      list_for_each_entry(data, q -> elevator -> elevator_data.queue, queuelist)
+      {
+        temp = list_entry(data -> queuelist.next, struct request, queuelist);
+        if(temp -> sector > rq -> sector)
+        {
+          list_add(&rq -> queuelist, &temp -> queuelist);
+        }
+        else
+        {
+          return;
+        }
+      }
+    }
+  }
+
+  static struct request *
+  sstf_former_request(struct request_queue *q, struct request *rq)
+  {
+    struct sstf_data *sd = q->elevator->elevator_data;
+    struct request data*;
+
+
+    if (rq->queuelist.prev == &sd->queue)
+    return NULL;
+    return list_entry(rq->queuelist.prev, struct request, queuelist);
+  }
+
+  static struct request *
+  noop_latter_request(struct request_queue *q, struct request *rq)
+  {
+    struct sstf_data *sd = q->elevator->elevator_data;
+
+    if (rq->queuelist.next == &nd->queue)
+    return NULL;
+    return list_entry(rq->queuelist.next, struct request, queuelist);
+  }
+
+  static int sstf_init_queue(struct request_queue *q, struct elevator_type *e)
+  {
+    struct sstf_data *sd;
+    struct elevator_queue *eq;
+
+    eq = elevator_alloc(q, e);
+    if (!eq)
+    return -ENOMEM;
+
+    sd = kmalloc_node(sizeof(*sd), GFP_KERNEL, q->node);
+    if (!sd) {
+      kobject_put(&eq->kobj);
+      return -ENOMEM;
+    }
+    eq->elevator_data = sd;
+
+    INIT_LIST_HEAD(&sd->queue);
+
+    spin_lock_irq(q->queue_lock);
+    q->elevator = eq;
+    spin_unlock_irq(q->queue_lock);
+    return 0;
+  }
+
+  static void sstf_exit_queue(struct elevator_queue *e)
+  {
+    struct sstf_data *nd = e->elevator_data;
+
+    BUG_ON(!list_empty(&nd->queue));
+    kfree(nd);
+  }
+
+  static struct elevator_type elevator_sstf = {
+    .ops = {
+      .elevator_merge_req_fn		= sstf_merged_requests,
+      .elevator_dispatch_fn		= sstf_dispatch,
+      .elevator_add_req_fn		= sstf_add_request,
+      .elevator_former_req_fn		= sstf_former_request,
+      .elevator_latter_req_fn		= sstf_latter_request,
+      .elevator_init_fn			= sstf_init_queue,
+      .elevator_exit_fn			= sstf_exit_queue,
+    },
+    .elevator_name = "sstf",
+    .elevator_owner = THIS_MODULE,
+  };
+
+  static int __init sstf_init(void)
+  {
+    return elv_register(&elevator_noop);
+  }
+
+  static void __exit sstf_exit(void)
+  {
+    elv_unregister(&elevator_noop);
+  }
+
+  module_init(sstf_init);
+  module_exit(sstf_exit);
+
+
+  MODULE_AUTHOR("Brian Huang, Brandon Mei");
+  MODULE_LICENSE("GPL");
+  MODULE_DESCRIPTION("No-op IO scheduler");
--- Kconfig.iosched	2018-05-06 20:30:20.521920549 -0700
+++ Kconfig.iosched1	2018-05-06 20:50:39.806795181 -0700
@@ -2,6 +2,13 @@
 
 menu "IO Schedulers"
 
+config IOSCHED_SSTF
+      tristate "SSTF SCHEDULER"
+      default y
+      ---help---
+            SSTF Scheduler
+
+
 config IOSCHED_NOOP
 	bool
 	default y
@@ -55,6 +62,9 @@
 	config DEFAULT_NOOP
 		bool "No-op"
 
+   config DEFAULT_SSTF
+      bool "SSTF" if IOSCHED_SSTF=y
+
 endchoice
 
 config DEFAULT_IOSCHED
@@ -62,7 +72,7 @@
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
-
+   default "sstf" if DEFAULT_SSTF
 endmenu
 
 endif
--- Makefile	2018-05-06 20:41:57.709953314 -0700
+++ Makefile_new	2018-05-06 20:44:03.781134516 -0700
@@ -19,7 +19,6 @@
 obj-$(CONFIG_IOSCHED_DEADLINE)	+= deadline-iosched.o
 obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
 
+obj-$(CONFIG_ISOCHED_SSTF) += sstf-iosched.o
 obj-$(CONFIG_BLOCK_COMPAT)	+= compat_ioctl.o
 obj-$(CONFIG_BLK_CMDLINE_PARSER)	+= cmdline-parser.o
 obj-$(CONFIG_BLK_DEV_INTEGRITY) += bio-integrity.o blk-integrity.o t10-pi.o
